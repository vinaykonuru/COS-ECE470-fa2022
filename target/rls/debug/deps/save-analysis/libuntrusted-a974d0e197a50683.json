{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0","program":"C:\\Users\\Vinay Konuru\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","untrusted","--edition=2018","C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=a974d0e197a50683","-C","extra-filename=-a974d0e197a50683","--out-dir","c:\\Users\\Vinay Konuru\\Documents\\Class\\ECE470\\ECE470-fa22\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Vinay Konuru\\Documents\\Class\\ECE470\\ECE470-fa22\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Vinay Konuru\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\Vinay Konuru\\Documents\\Class\\ECE470\\ECE470-fa22\\target\\rls\\debug\\deps\\libuntrusted-a974d0e197a50683.rmeta"},"prelude":{"crate_id":{"name":"untrusted","disambiguator":[411915928423820978,0]},"crate_root":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src","external_crates":[{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","num":1,"id":{"name":"core","disambiguator":[16639894342417964460,0]}},{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[1960661561601094031,0]}},{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[4626707339213967717,0]}}],"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":770,"byte_end":14157,"line_start":15,"line_end":375,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":770,"byte_end":14157,"line_start":15,"line_end":375,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":62},{"krate":0,"index":65},{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":75},{"krate":0,"index":4},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":19},{"krate":0,"index":21},{"krate":0,"index":23},{"krate":0,"index":78},{"krate":0,"index":82},{"krate":0,"index":28},{"krate":0,"index":30},{"krate":0,"index":85},{"krate":0,"index":87},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":49}],"decl_id":null,"docs":" untrusted.rs: Safe, fast, zero-panic, zero-crashing, zero-allocation\n parsing of untrusted inputs in Rust.","sig":null,"attributes":[{"value":"/ untrusted.rs: Safe, fast, zero-panic, zero-crashing, zero-allocation","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":770,"byte_end":842,"line_start":15,"line_end":15,"column_start":1,"column_end":73}},{"value":"/ parsing of untrusted inputs in Rust.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":843,"byte_end":883,"line_start":16,"line_end":16,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":884,"byte_end":887,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ <code>git clone https://github.com/briansmith/untrusted</code>","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":888,"byte_end":954,"line_start":18,"line_end":18,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":955,"byte_end":958,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ untrusted.rs goes beyond Rust's normal safety guarantees by  also","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":959,"byte_end":1028,"line_start":20,"line_end":20,"column_start":1,"column_end":70}},{"value":"/ guaranteeing that parsing will be panic-free, as long as","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":1029,"byte_end":1089,"line_start":21,"line_end":21,"column_start":1,"column_end":61}},{"value":"/ `untrusted::Input::as_slice_less_safe()` is not used. It avoids copying","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":1090,"byte_end":1165,"line_start":22,"line_end":22,"column_start":1,"column_end":76}},{"value":"/ data and heap allocation and strives to prevent common pitfalls such as","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":1166,"byte_end":1241,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"/ accidentally parsing input bytes multiple times. In order to meet these","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":1242,"byte_end":1317,"line_start":24,"line_end":24,"column_start":1,"column_end":76}},{"value":"/ goals, untrusted.rs is limited in functionality such that it works best for","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":1318,"byte_end":1397,"line_start":25,"line_end":25,"column_start":1,"column_end":80}},{"value":"/ input languages with a small fixed amount of lookahead such as ASN.1, TLS,","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":1398,"byte_end":1476,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/ TCP/IP, and many other networking, IPC, and related protocols. Languages","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":1477,"byte_end":1553,"line_start":27,"line_end":27,"column_start":1,"column_end":77}},{"value":"/ that require more lookahead and/or backtracking require some significant","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":1554,"byte_end":1630,"line_start":28,"line_end":28,"column_start":1,"column_end":77}},{"value":"/ contortions to parse using this framework. It would not be realistic to use","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":1631,"byte_end":1710,"line_start":29,"line_end":29,"column_start":1,"column_end":80}},{"value":"/ it for parsing programming language code, for example.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":1711,"byte_end":1769,"line_start":30,"line_end":30,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":1770,"byte_end":1773,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ The overall pattern for using untrusted.rs is:","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":1774,"byte_end":1824,"line_start":32,"line_end":32,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":1825,"byte_end":1828,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ 1. Write a recursive-descent-style parser for the input language, where the","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":1829,"byte_end":1908,"line_start":34,"line_end":34,"column_start":1,"column_end":80}},{"value":"/    input data is given as a `&mut untrusted::Reader` parameter to each","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":1909,"byte_end":1983,"line_start":35,"line_end":35,"column_start":1,"column_end":75}},{"value":"/    function. Each function should have a return type of `Result<V, E>` for","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":1984,"byte_end":2062,"line_start":36,"line_end":36,"column_start":1,"column_end":79}},{"value":"/    some value type `V` and some error type `E`, either or both of which may","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":2063,"byte_end":2142,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/    be `()`. Functions for parsing the lowest-level language constructs","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":2143,"byte_end":2217,"line_start":38,"line_end":38,"column_start":1,"column_end":75}},{"value":"/    should be defined. Those lowest-level functions will parse their inputs","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":2218,"byte_end":2296,"line_start":39,"line_end":39,"column_start":1,"column_end":79}},{"value":"/    using `::read_byte()`, `Reader::peek()`, and similar functions.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":2297,"byte_end":2367,"line_start":40,"line_end":40,"column_start":1,"column_end":71}},{"value":"/    Higher-level language constructs are then parsed by calling the","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":2368,"byte_end":2438,"line_start":41,"line_end":41,"column_start":1,"column_end":71}},{"value":"/    lower-level functions in sequence.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":2439,"byte_end":2480,"line_start":42,"line_end":42,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":2481,"byte_end":2484,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ 2. Wrap the top-most functions of your recursive-descent parser in","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":2485,"byte_end":2555,"line_start":44,"line_end":44,"column_start":1,"column_end":71}},{"value":"/    functions that take their input data as an `untrusted::Input`. The","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":2556,"byte_end":2629,"line_start":45,"line_end":45,"column_start":1,"column_end":74}},{"value":"/    wrapper functions should call the `Input`'s `read_all` (or a variant","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":2630,"byte_end":2705,"line_start":46,"line_end":46,"column_start":1,"column_end":76}},{"value":"/    thereof) method. The wrapper functions are the only ones that should be","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":2706,"byte_end":2784,"line_start":47,"line_end":47,"column_start":1,"column_end":79}},{"value":"/    exposed outside the parser's module.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":2785,"byte_end":2828,"line_start":48,"line_end":48,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":2829,"byte_end":2832,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ 3. After receiving the input data to parse, wrap it in an `untrusted::Input`","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":2833,"byte_end":2913,"line_start":50,"line_end":50,"column_start":1,"column_end":81}},{"value":"/    using `untrusted::Input::from()` as early as possible. Pass the","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":2914,"byte_end":2984,"line_start":51,"line_end":51,"column_start":1,"column_end":71}},{"value":"/    `untrusted::Input` to the wrapper functions when they need to be parsed.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":2985,"byte_end":3064,"line_start":52,"line_end":52,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":3065,"byte_end":3068,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ In general parsers built using `untrusted::Reader` do not need to explicitly","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":3069,"byte_end":3149,"line_start":54,"line_end":54,"column_start":1,"column_end":81}},{"value":"/ check for end-of-input unless they are parsing optional constructs, because","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":3150,"byte_end":3229,"line_start":55,"line_end":55,"column_start":1,"column_end":80}},{"value":"/ `Reader::read_byte()` will return `Err(EndOfInput)` on end-of-input.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":3230,"byte_end":3302,"line_start":56,"line_end":56,"column_start":1,"column_end":73}},{"value":"/ Similarly, parsers using `untrusted::Reader` generally don't need to check","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":3303,"byte_end":3381,"line_start":57,"line_end":57,"column_start":1,"column_end":79}},{"value":"/ for extra junk at the end of the input as long as the parser's API uses the","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":3382,"byte_end":3461,"line_start":58,"line_end":58,"column_start":1,"column_end":80}},{"value":"/ pattern described above, as `read_all` and its variants automatically check","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":3462,"byte_end":3541,"line_start":59,"line_end":59,"column_start":1,"column_end":80}},{"value":"/ for trailing junk. `Reader::skip_to_end()` must be used when any remaining","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":3542,"byte_end":3620,"line_start":60,"line_end":60,"column_start":1,"column_end":79}},{"value":"/ unread input should be ignored without triggering an error.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":3621,"byte_end":3684,"line_start":61,"line_end":61,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":3685,"byte_end":3688,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ untrusted.rs works best when all processing of the input data is done","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":3689,"byte_end":3762,"line_start":63,"line_end":63,"column_start":1,"column_end":74}},{"value":"/ through the `untrusted::Input` and `untrusted::Reader` types. In","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":3763,"byte_end":3831,"line_start":64,"line_end":64,"column_start":1,"column_end":69}},{"value":"/ particular, avoid trying to parse input data using functions that take","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":3832,"byte_end":3906,"line_start":65,"line_end":65,"column_start":1,"column_end":75}},{"value":"/ byte slices. However, when you need to access a part of the input data as","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":3907,"byte_end":3984,"line_start":66,"line_end":66,"column_start":1,"column_end":78}},{"value":"/ a slice to use a function that isn't written using untrusted.rs,","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":3985,"byte_end":4053,"line_start":67,"line_end":67,"column_start":1,"column_end":69}},{"value":"/ `Input::as_slice_less_safe()` can be used.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":4054,"byte_end":4100,"line_start":68,"line_end":68,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":4101,"byte_end":4104,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ It is recommend to use `use untrusted;` and then `untrusted::Input`,","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":4105,"byte_end":4177,"line_start":70,"line_end":70,"column_start":1,"column_end":73}},{"value":"/ `untrusted::Reader`, etc., instead of using `use untrusted::*`. Qualifying","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":4178,"byte_end":4256,"line_start":71,"line_end":71,"column_start":1,"column_end":79}},{"value":"/ the names with `untrusted` helps remind the reader of the code that it is","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":4257,"byte_end":4334,"line_start":72,"line_end":72,"column_start":1,"column_end":78}},{"value":"/ dealing with *untrusted* input.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":4335,"byte_end":4370,"line_start":73,"line_end":73,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":4371,"byte_end":4374,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":4375,"byte_end":4389,"line_start":75,"line_end":75,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":4390,"byte_end":4393,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ [*ring*](https://github.com/briansmith/ring)'s parser for the subset of","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":4394,"byte_end":4469,"line_start":77,"line_end":77,"column_start":1,"column_end":76}},{"value":"/ ASN.1 DER it needs to understand,","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":4470,"byte_end":4507,"line_start":78,"line_end":78,"column_start":1,"column_end":38}},{"value":"/ [`ring::der`](https://github.com/briansmith/ring/blob/master/src/der.rs),","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":4508,"byte_end":4585,"line_start":79,"line_end":79,"column_start":1,"column_end":78}},{"value":"/ is built on top of untrusted.rs. *ring* also uses untrusted.rs to parse ECC","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":4586,"byte_end":4665,"line_start":80,"line_end":80,"column_start":1,"column_end":80}},{"value":"/ public keys, RSA PKCS#1 1.5 padding, and for all other parsing it does.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":4666,"byte_end":4741,"line_start":81,"line_end":81,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":4742,"byte_end":4745,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ All of [webpki](https://github.com/briansmith/webpki)'s parsing of X.509","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":4746,"byte_end":4822,"line_start":83,"line_end":83,"column_start":1,"column_end":77}},{"value":"/ certificates (also ASN.1 DER) is done using untrusted.rs.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":4823,"byte_end":4884,"line_start":84,"line_end":84,"column_start":1,"column_end":62}},{"value":"deny(unused_qualifications)","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":5016,"byte_end":5047,"line_start":88,"line_end":88,"column_start":1,"column_end":32}},{"value":"forbid(anonymous_parameters, box_pointers, legacy_directory_ownership,\nmissing_docs, trivial_casts, trivial_numeric_casts, unsafe_code,\nunstable_features, unused_extern_crates, unused_import_braces, unused_results,\nvariant_size_differences, warnings)","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":5048,"byte_end":5356,"line_start":89,"line_end":103,"column_start":1,"column_end":3}},{"value":"no_std","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":5357,"byte_end":5367,"line_start":104,"line_end":104,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":62},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":5532,"byte_end":5537,"line_start":110,"line_end":110,"column_start":12,"column_end":17},"name":"Input","qualname":"::Input","value":"Input {  }","parent":null,"children":[{"krate":0,"index":64}],"decl_id":null,"docs":" A wrapper around `&'a [u8]` that helps in writing panic-free code.","sig":null,"attributes":[{"value":"/ A wrapper around `&'a [u8]` that helps in writing panic-free code.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":5369,"byte_end":5439,"line_start":106,"line_end":106,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":5440,"byte_end":5443,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ No methods of `Input` will ever panic.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":5444,"byte_end":5486,"line_start":108,"line_end":108,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":6},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":5678,"byte_end":5682,"line_start":116,"line_end":116,"column_start":18,"column_end":22},"name":"from","qualname":"<Input>::from","value":"const fn from(&'a [u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Input` for the given input `bytes`.\n","sig":null,"attributes":[{"value":"/ Construct a new `Input` for the given input `bytes`.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":5604,"byte_end":5660,"line_start":115,"line_end":115,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":7},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":6271,"byte_end":6279,"line_start":129,"line_end":129,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Input>::is_empty","value":"fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the input is empty and false otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the input is empty and false otherwise.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":6184,"byte_end":6245,"line_start":127,"line_end":127,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":6250,"byte_end":6259,"line_start":128,"line_end":128,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":8},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":6390,"byte_end":6393,"line_start":133,"line_end":133,"column_start":12,"column_end":15},"name":"len","qualname":"<Input>::len","value":"fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the `Input`.\n","sig":null,"attributes":[{"value":"/ Returns the length of the `Input`.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":6326,"byte_end":6364,"line_start":131,"line_end":131,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":6369,"byte_end":6378,"line_start":132,"line_end":132,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":9},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":6640,"byte_end":6648,"line_start":138,"line_end":138,"column_start":12,"column_end":20},"name":"read_all","qualname":"<Input>::read_all","value":"fn read_all<F, R, E>(&Self, E, F) -> Result<R, E> where\nF: for<'_> FnOnce(&'_ mut Reader) -> Result<R, E>","parent":null,"children":[],"decl_id":null,"docs":" Calls `read` with the given input as a `Reader`, ensuring that `read`\n consumed the entire input. If `read` does not consume the entire input,\n `incomplete_read` is returned.\n","sig":null,"attributes":[{"value":"/ Calls `read` with the given input as a `Reader`, ensuring that `read`","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":6436,"byte_end":6509,"line_start":135,"line_end":135,"column_start":5,"column_end":78}},{"value":"/ consumed the entire input. If `read` does not consume the entire input,","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":6514,"byte_end":6589,"line_start":136,"line_end":136,"column_start":5,"column_end":80}},{"value":"/ `incomplete_read` is returned.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":6594,"byte_end":6628,"line_start":137,"line_end":137,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":13},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":7140,"byte_end":7158,"line_start":154,"line_end":154,"column_start":12,"column_end":30},"name":"as_slice_less_safe","qualname":"<Input>::as_slice_less_safe","value":"fn as_slice_less_safe(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" Access the input as a slice so it can be processed by functions that\n are not written using the Input/Reader framework.\n","sig":null,"attributes":[{"value":"/ Access the input as a slice so it can be processed by functions that","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":6984,"byte_end":7056,"line_start":151,"line_end":151,"column_start":5,"column_end":77}},{"value":"/ are not written using the Input/Reader framework.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":7061,"byte_end":7114,"line_start":152,"line_end":152,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":7119,"byte_end":7128,"line_start":153,"line_end":153,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":16},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":7278,"byte_end":7282,"line_start":159,"line_end":159,"column_start":8,"column_end":12},"name":"from","qualname":"<Input as core::convert::From>::from","value":"fn from(&'a [u8]) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":7261,"byte_end":7270,"line_start":158,"line_end":158,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":7571,"byte_end":7573,"line_start":167,"line_end":167,"column_start":8,"column_end":10},"name":"eq","qualname":"<Input as core::cmp::PartialEq>::eq","value":"fn eq(&Self, &Input) -> bool","parent":{"krate":1,"index":2831},"children":[],"decl_id":{"krate":1,"index":2833},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":7554,"byte_end":7563,"line_start":166,"line_end":166,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":7737,"byte_end":7739,"line_start":174,"line_end":174,"column_start":8,"column_end":10},"name":"eq","qualname":"<Input as core::cmp::PartialEq>::eq","value":"fn eq(&Self, &[u8]) -> bool","parent":{"krate":1,"index":2831},"children":[],"decl_id":{"krate":1,"index":2833},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":7720,"byte_end":7729,"line_start":173,"line_end":173,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":7869,"byte_end":7871,"line_start":179,"line_end":179,"column_start":8,"column_end":10},"name":"eq","qualname":"<[u8] as core::cmp::PartialEq>::eq","value":"fn eq(&Self, &Input) -> bool","parent":{"krate":1,"index":2831},"children":[],"decl_id":{"krate":1,"index":2833},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":7852,"byte_end":7861,"line_start":178,"line_end":178,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":23},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":8119,"byte_end":8136,"line_start":185,"line_end":185,"column_start":8,"column_end":25},"name":"read_all_optional","qualname":"::read_all_optional","value":"fn read_all_optional<'a, F, R, E>(Option<Input>, E, F) -> Result<R, E> where\nF: for<'_> FnOnce(Option<&'_ mut Reader>) -> Result<R, E>","parent":null,"children":[],"decl_id":null,"docs":" Calls `read` with the given input as a `Reader`, ensuring that `read`\n consumed the entire input. When `input` is `None`, `read` will be\n called with `None`.\n","sig":null,"attributes":[{"value":"/ Calls `read` with the given input as a `Reader`, ensuring that `read`","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":7944,"byte_end":8017,"line_start":182,"line_end":182,"column_start":1,"column_end":74}},{"value":"/ consumed the entire input. When `input` is `None`, `read` will be","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":8018,"byte_end":8087,"line_start":183,"line_end":183,"column_start":1,"column_end":70}},{"value":"/ called with `None`.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":8088,"byte_end":8111,"line_start":184,"line_end":184,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":78},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":9267,"byte_end":9273,"line_start":217,"line_end":217,"column_start":12,"column_end":18},"name":"Reader","qualname":"::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":80},{"krate":0,"index":81}],"decl_id":null,"docs":" A read-only, forward-only* cursor into the data in an `Input`.","sig":null,"attributes":[{"value":"/ A read-only, forward-only* cursor into the data in an `Input`.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":8612,"byte_end":8678,"line_start":205,"line_end":205,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":8679,"byte_end":8682,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ Using `Reader` to parse input helps to ensure that no byte of the input","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":8683,"byte_end":8758,"line_start":207,"line_end":207,"column_start":1,"column_end":76}},{"value":"/ will be accidentally processed more than once. Using `Reader` in","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":8759,"byte_end":8827,"line_start":208,"line_end":208,"column_start":1,"column_end":69}},{"value":"/ conjunction with `read_all` and `read_all_optional` helps ensure that no","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":8828,"byte_end":8904,"line_start":209,"line_end":209,"column_start":1,"column_end":77}},{"value":"/ byte of the input is accidentally left unprocessed. The methods of `Reader`","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":8905,"byte_end":8984,"line_start":210,"line_end":210,"column_start":1,"column_end":80}},{"value":"/ never panic, so `Reader` also assists the writing of panic-free code.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":8985,"byte_end":9058,"line_start":211,"line_end":211,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":9059,"byte_end":9062,"line_start":212,"line_end":212,"column_start":1,"column_end":4}},{"value":"/ \\* `Reader` is not strictly forward-only because of the method","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":9063,"byte_end":9129,"line_start":213,"line_end":213,"column_start":1,"column_end":67}},{"value":"/ `get_input_between_marks`, which is provided mainly to support calculating","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":9130,"byte_end":9208,"line_start":214,"line_end":214,"column_start":1,"column_end":79}},{"value":"/ digests over parsed data.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":9209,"byte_end":9238,"line_start":215,"line_end":215,"column_start":1,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":28},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":9398,"byte_end":9402,"line_start":223,"line_end":223,"column_start":12,"column_end":16},"name":"Mark","qualname":"::Mark","value":"Mark {  }","parent":null,"children":[{"krate":0,"index":29}],"decl_id":null,"docs":" An index into the already-parsed input of a `Reader`.\n","sig":null,"attributes":[{"value":"/ An index into the already-parsed input of a `Reader`.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":9329,"byte_end":9386,"line_start":222,"line_end":222,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":9611,"byte_end":9614,"line_start":231,"line_end":231,"column_start":12,"column_end":15},"name":"new","qualname":"<Reader>::new","value":"fn new(Input) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new Reader for the given input. Use `read_all` or\n `read_all_optional` instead of `Reader::new` whenever possible.\n","sig":null,"attributes":[{"value":"/ Construct a new Reader for the given input. Use `read_all` or","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":9448,"byte_end":9513,"line_start":228,"line_end":228,"column_start":5,"column_end":70}},{"value":"/ `read_all_optional` instead of `Reader::new` whenever possible.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":9518,"byte_end":9585,"line_start":229,"line_end":229,"column_start":5,"column_end":72}},{"value":"inline","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":9590,"byte_end":9599,"line_start":230,"line_end":230,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":9846,"byte_end":9852,"line_start":241,"line_end":241,"column_start":12,"column_end":18},"name":"at_end","qualname":"<Reader>::at_end","value":"fn at_end(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the reader is at the end of the input, and `false`\n otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the reader is at the end of the input, and `false`","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":9729,"byte_end":9801,"line_start":238,"line_end":238,"column_start":5,"column_end":77}},{"value":"/ otherwise.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":9806,"byte_end":9820,"line_start":239,"line_end":239,"column_start":5,"column_end":19}},{"value":"inline","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":9825,"byte_end":9834,"line_start":240,"line_end":240,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":10034,"byte_end":10057,"line_start":246,"line_end":246,"column_start":12,"column_end":35},"name":"get_input_between_marks","qualname":"<Reader>::get_input_between_marks","value":"fn get_input_between_marks(&Self, Mark, Mark) -> Result<Input, EndOfInput>","parent":null,"children":[],"decl_id":null,"docs":" Returns an `Input` for already-parsed input that has had its boundaries\n marked using `mark`.\n","sig":null,"attributes":[{"value":"/ Returns an `Input` for already-parsed input that has had its boundaries","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":9904,"byte_end":9979,"line_start":243,"line_end":243,"column_start":5,"column_end":80}},{"value":"/ marked using `mark`.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":9984,"byte_end":10008,"line_start":244,"line_end":244,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":10013,"byte_end":10022,"line_start":245,"line_end":245,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":10433,"byte_end":10437,"line_start":258,"line_end":258,"column_start":12,"column_end":16},"name":"mark","qualname":"<Reader>::mark","value":"fn mark(&Self) -> Mark","parent":null,"children":[],"decl_id":null,"docs":" Return the current position of the `Reader` for future use in a call\n to `get_input_between_marks`.\n","sig":null,"attributes":[{"value":"/ Return the current position of the `Reader` for future use in a call","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":10297,"byte_end":10369,"line_start":255,"line_end":255,"column_start":5,"column_end":77}},{"value":"/ to `get_input_between_marks`.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":10374,"byte_end":10407,"line_start":256,"line_end":256,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":10412,"byte_end":10421,"line_start":257,"line_end":257,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":10633,"byte_end":10637,"line_start":263,"line_end":263,"column_start":12,"column_end":16},"name":"peek","qualname":"<Reader>::peek","value":"fn peek(&Self, u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if there is at least one more byte in the input and that\n byte is equal to `b`, and false otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `true` if there is at least one more byte in the input and that","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":10481,"byte_end":10556,"line_start":260,"line_end":260,"column_start":5,"column_end":80}},{"value":"/ byte is equal to `b`, and false otherwise.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":10561,"byte_end":10607,"line_start":261,"line_end":261,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":10612,"byte_end":10621,"line_start":262,"line_end":262,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":10990,"byte_end":10999,"line_start":275,"line_end":275,"column_start":12,"column_end":21},"name":"read_byte","qualname":"<Reader>::read_byte","value":"fn read_byte(&mut Self) -> Result<u8, EndOfInput>","parent":null,"children":[],"decl_id":null,"docs":" Reads the next input byte.","sig":null,"attributes":[{"value":"/ Reads the next input byte.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":10795,"byte_end":10825,"line_start":270,"line_end":270,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":10830,"byte_end":10833,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ Returns `Ok(b)` where `b` is the next input byte, or `Err(EndOfInput)`","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":10838,"byte_end":10912,"line_start":272,"line_end":272,"column_start":5,"column_end":79}},{"value":"/ if the `Reader` is at the end of the input.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":10917,"byte_end":10964,"line_start":273,"line_end":273,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":10969,"byte_end":10978,"line_start":274,"line_end":274,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":11509,"byte_end":11519,"line_start":291,"line_end":291,"column_start":12,"column_end":22},"name":"read_bytes","qualname":"<Reader>::read_bytes","value":"fn read_bytes(&mut Self, usize) -> Result<Input, EndOfInput>","parent":null,"children":[],"decl_id":null,"docs":" Skips `num_bytes` of the input, returning the skipped input as an\n `Input`.","sig":null,"attributes":[{"value":"/ Skips `num_bytes` of the input, returning the skipped input as an","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":11270,"byte_end":11339,"line_start":285,"line_end":285,"column_start":5,"column_end":74}},{"value":"/ `Input`.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":11344,"byte_end":11356,"line_start":286,"line_end":286,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":11361,"byte_end":11364,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ Returns `Ok(i)` if there are at least `num_bytes` of input remaining,","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":11369,"byte_end":11442,"line_start":288,"line_end":288,"column_start":5,"column_end":78}},{"value":"/ and `Err(EndOfInput)` otherwise.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":11447,"byte_end":11483,"line_start":289,"line_end":289,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":11488,"byte_end":11497,"line_start":290,"line_end":290,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":11994,"byte_end":12011,"line_start":305,"line_end":305,"column_start":12,"column_end":29},"name":"read_bytes_to_end","qualname":"<Reader>::read_bytes_to_end","value":"fn read_bytes_to_end(&mut Self) -> Input","parent":null,"children":[],"decl_id":null,"docs":" Skips the reader to the end of the input, returning the skipped input\n as an `Input`.\n","sig":null,"attributes":[{"value":"/ Skips the reader to the end of the input, returning the skipped input","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":11872,"byte_end":11945,"line_start":302,"line_end":302,"column_start":5,"column_end":78}},{"value":"/ as an `Input`.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":11950,"byte_end":11968,"line_start":303,"line_end":303,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":11973,"byte_end":11982,"line_start":304,"line_end":304,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":12348,"byte_end":12360,"line_start":313,"line_end":313,"column_start":12,"column_end":24},"name":"read_partial","qualname":"<Reader>::read_partial","value":"fn read_partial<F, R, E>(&mut Self, F) -> Result<(Input, R), E> where\nF: for<'_> FnOnce(&'_ mut Reader) -> Result<R, E>","parent":null,"children":[],"decl_id":null,"docs":" Calls `read()` with the given input as a `Reader`. On success, returns a\n pair `(bytes_read, r)` where `bytes_read` is what `read()` consumed and\n `r` is `read()`'s return value.\n","sig":null,"attributes":[{"value":"/ Calls `read()` with the given input as a `Reader`. On success, returns a","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":12140,"byte_end":12216,"line_start":310,"line_end":310,"column_start":5,"column_end":81}},{"value":"/ pair `(bytes_read, r)` where `bytes_read` is what `read()` consumed and","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":12221,"byte_end":12296,"line_start":311,"line_end":311,"column_start":5,"column_end":80}},{"value":"/ `r` is `read()`'s return value.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":12301,"byte_end":12336,"line_start":312,"line_end":312,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":12878,"byte_end":12882,"line_start":330,"line_end":330,"column_start":12,"column_end":16},"name":"skip","qualname":"<Reader>::skip","value":"fn skip(&mut Self, usize) -> Result<(), EndOfInput>","parent":null,"children":[],"decl_id":null,"docs":" Skips `num_bytes` of the input.","sig":null,"attributes":[{"value":"/ Skips `num_bytes` of the input.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":12690,"byte_end":12725,"line_start":325,"line_end":325,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":12730,"byte_end":12733,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ Returns `Ok(i)` if there are at least `num_bytes` of input remaining,","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":12738,"byte_end":12811,"line_start":327,"line_end":327,"column_start":5,"column_end":78}},{"value":"/ and `Err(EndOfInput)` otherwise.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":12816,"byte_end":12852,"line_start":328,"line_end":328,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":12857,"byte_end":12866,"line_start":329,"line_end":329,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":13069,"byte_end":13080,"line_start":336,"line_end":336,"column_start":12,"column_end":23},"name":"skip_to_end","qualname":"<Reader>::skip_to_end","value":"fn skip_to_end(&mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Skips the reader to the end of the input.\n","sig":null,"attributes":[{"value":"/ Skips the reader to the end of the input.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":12998,"byte_end":13043,"line_start":334,"line_end":334,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":13048,"byte_end":13057,"line_start":335,"line_end":335,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":85},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":13309,"byte_end":13319,"line_start":342,"line_end":342,"column_start":12,"column_end":22},"name":"EndOfInput","qualname":"::EndOfInput","value":"","parent":null,"children":[],"decl_id":null,"docs":" The error type used to indicate the end of the input was reached before the\n operation could be completed.\n","sig":null,"attributes":[{"value":"/ The error type used to indicate the end of the input was reached before the","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":13139,"byte_end":13218,"line_start":339,"line_end":339,"column_start":1,"column_end":80}},{"value":"/ operation could be completed.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":13219,"byte_end":13252,"line_start":340,"line_end":340,"column_start":1,"column_end":34}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":5588,"byte_end":5593,"line_start":114,"line_end":114,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":13}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":7245,"byte_end":7250,"line_start":157,"line_end":157,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":16}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":7538,"byte_end":7543,"line_start":165,"line_end":165,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":18}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":7704,"byte_end":7709,"line_start":172,"line_end":172,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":20}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":9431,"byte_end":9437,"line_start":227,"line_end":227,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":46},{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":13548,"byte_end":13553,"line_start":353,"line_end":353,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":5588,"byte_end":5593,"line_start":114,"line_end":114,"column_start":10,"column_end":15},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":62},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":7245,"byte_end":7250,"line_start":157,"line_end":157,"column_start":29,"column_end":34},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":62},"to":{"krate":1,"index":3085}},{"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":7538,"byte_end":7543,"line_start":165,"line_end":165,"column_start":31,"column_end":36},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":62},"to":{"krate":1,"index":2831}},{"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":7704,"byte_end":7709,"line_start":172,"line_end":172,"column_start":26,"column_end":31},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":62},"to":{"krate":1,"index":2831}},{"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":9431,"byte_end":9437,"line_start":227,"line_end":227,"column_start":10,"column_end":16},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":78},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\untrusted-0.7.0\\src/untrusted.rs","byte_start":13548,"byte_end":13553,"line_start":353,"line_end":353,"column_start":14,"column_end":19},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":98},"to":{"krate":4294967295,"index":4294967295}}]}