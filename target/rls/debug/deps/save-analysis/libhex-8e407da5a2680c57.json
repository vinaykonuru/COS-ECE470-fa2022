{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0","program":"C:\\Users\\Vinay Konuru\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","hex","--edition=2018","C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=8e407da5a2680c57","-C","extra-filename=-8e407da5a2680c57","--out-dir","c:\\Users\\Vinay Konuru\\Documents\\Class\\ECE470\\ECE470-fa22\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Vinay Konuru\\Documents\\Class\\ECE470\\ECE470-fa22\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Vinay Konuru\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\Vinay Konuru\\Documents\\Class\\ECE470\\ECE470-fa22\\target\\rls\\debug\\deps\\libhex-8e407da5a2680c57.rmeta"},"prelude":{"crate_id":{"name":"hex","disambiguator":[17952580548491968804,0]},"crate_root":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src","external_crates":[{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[4402420685575932686,0]}},{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[16639894342417964460,0]}},{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[1960661561601094031,0]}},{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4626707339213967717,0]}},{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[13575330073562295178,0]}},{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[15417973128473761251,0]}},{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3307230022923030275,0]}},{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[1477362299507908243,0]}},{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[6635298892910706034,0]}},{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1545597443293537734,0]}},{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","num":11,"id":{"name":"adler","disambiguator":[1361891767217464645,0]}},{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[15508830081156326446,0]}},{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[15010314299123018028,0]}},{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[4879419464889335982,0]}},{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[14947387329158915948,0]}}],"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":0,"byte_end":12851,"line_start":1,"line_end":461,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":0,"byte_end":12851,"line_start":1,"line_end":461,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":24},{"krate":0,"index":28},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":69},{"krate":0,"index":77},{"krate":0,"index":79},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":60},{"krate":0,"index":86},{"krate":0,"index":92},{"krate":0,"index":98},{"krate":0,"index":104},{"krate":0,"index":110},{"krate":0,"index":116},{"krate":0,"index":122},{"krate":0,"index":128},{"krate":0,"index":134},{"krate":0,"index":140},{"krate":0,"index":146},{"krate":0,"index":152},{"krate":0,"index":158},{"krate":0,"index":164},{"krate":0,"index":170},{"krate":0,"index":176},{"krate":0,"index":182},{"krate":0,"index":188},{"krate":0,"index":194},{"krate":0,"index":200},{"krate":0,"index":206},{"krate":0,"index":212},{"krate":0,"index":218},{"krate":0,"index":224},{"krate":0,"index":230},{"krate":0,"index":236},{"krate":0,"index":242},{"krate":0,"index":248},{"krate":0,"index":254},{"krate":0,"index":260},{"krate":0,"index":266},{"krate":0,"index":272},{"krate":0,"index":278},{"krate":0,"index":284},{"krate":0,"index":290},{"krate":0,"index":296},{"krate":0,"index":302},{"krate":0,"index":308},{"krate":0,"index":314},{"krate":0,"index":320},{"krate":0,"index":326},{"krate":0,"index":332},{"krate":0,"index":338},{"krate":0,"index":344},{"krate":0,"index":350},{"krate":0,"index":356},{"krate":0,"index":362},{"krate":0,"index":368},{"krate":0,"index":374},{"krate":0,"index":380},{"krate":0,"index":386},{"krate":0,"index":392},{"krate":0,"index":398},{"krate":0,"index":404},{"krate":0,"index":410},{"krate":0,"index":416},{"krate":0,"index":422},{"krate":0,"index":428},{"krate":0,"index":434},{"krate":0,"index":440},{"krate":0,"index":446},{"krate":0,"index":452},{"krate":0,"index":458},{"krate":0,"index":464},{"krate":0,"index":470},{"krate":0,"index":476},{"krate":0,"index":482},{"krate":0,"index":488},{"krate":0,"index":494},{"krate":0,"index":500},{"krate":0,"index":506},{"krate":0,"index":512},{"krate":0,"index":518},{"krate":0,"index":524},{"krate":0,"index":530},{"krate":0,"index":536},{"krate":0,"index":542},{"krate":0,"index":548},{"krate":0,"index":554},{"krate":0,"index":560},{"krate":0,"index":566},{"krate":0,"index":572},{"krate":0,"index":578},{"krate":0,"index":584},{"krate":0,"index":590},{"krate":0,"index":596},{"krate":0,"index":602},{"krate":0,"index":608},{"krate":0,"index":614},{"krate":0,"index":620},{"krate":0,"index":626},{"krate":0,"index":632},{"krate":0,"index":638},{"krate":0,"index":644},{"krate":0,"index":650},{"krate":0,"index":656},{"krate":0,"index":662},{"krate":0,"index":668},{"krate":0,"index":674},{"krate":0,"index":680},{"krate":0,"index":686},{"krate":0,"index":692},{"krate":0,"index":698},{"krate":0,"index":704},{"krate":0,"index":710},{"krate":0,"index":716},{"krate":0,"index":722},{"krate":0,"index":728},{"krate":0,"index":734},{"krate":0,"index":740},{"krate":0,"index":746},{"krate":0,"index":752},{"krate":0,"index":758},{"krate":0,"index":764},{"krate":0,"index":770},{"krate":0,"index":776},{"krate":0,"index":782},{"krate":0,"index":788},{"krate":0,"index":794},{"krate":0,"index":800},{"krate":0,"index":806},{"krate":0,"index":812},{"krate":0,"index":818},{"krate":0,"index":824},{"krate":0,"index":830},{"krate":0,"index":836},{"krate":0,"index":842},{"krate":0,"index":848},{"krate":0,"index":854},{"krate":0,"index":860},{"krate":0,"index":866},{"krate":0,"index":872},{"krate":0,"index":878},{"krate":0,"index":884},{"krate":0,"index":890},{"krate":0,"index":896},{"krate":0,"index":902},{"krate":0,"index":908},{"krate":0,"index":914},{"krate":0,"index":920},{"krate":0,"index":926},{"krate":0,"index":932},{"krate":0,"index":938},{"krate":0,"index":944},{"krate":0,"index":950},{"krate":0,"index":956},{"krate":0,"index":962},{"krate":0,"index":968},{"krate":0,"index":974},{"krate":0,"index":980},{"krate":0,"index":986},{"krate":0,"index":992},{"krate":0,"index":998},{"krate":0,"index":1004},{"krate":0,"index":1010},{"krate":0,"index":1016},{"krate":0,"index":1022},{"krate":0,"index":1028},{"krate":0,"index":1034},{"krate":0,"index":61},{"krate":0,"index":63},{"krate":0,"index":65},{"krate":0,"index":67}],"decl_id":null,"docs":" Encoding and decoding hex strings.","sig":null,"attributes":[{"value":"/ Encoding and decoding hex strings.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":507,"byte_end":545,"line_start":12,"line_end":12,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":546,"byte_end":549,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ For most cases, you can simply use the `decode()`, `encode()` and","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":550,"byte_end":619,"line_start":14,"line_end":14,"column_start":1,"column_end":70}},{"value":"/ `encode_upper()` functions. If you need a bit more control, use the traits","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":620,"byte_end":698,"line_start":15,"line_end":15,"column_start":1,"column_end":79}},{"value":"/ `ToHex` and `FromHex` instead.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":699,"byte_end":733,"line_start":16,"line_end":16,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":734,"byte_end":737,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":738,"byte_end":751,"line_start":18,"line_end":18,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":752,"byte_end":755,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":756,"byte_end":763,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/ extern crate hex;","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":764,"byte_end":785,"line_start":21,"line_end":21,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":786,"byte_end":789,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":790,"byte_end":805,"line_start":23,"line_end":23,"column_start":1,"column_end":16}},{"value":"/     let hex_string = hex::encode(\"Hello world!\");","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":806,"byte_end":859,"line_start":24,"line_end":24,"column_start":1,"column_end":54}},{"value":"/     println!(\"{}\", hex_string); // Prints '48656c6c6f20776f726c6421'","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":860,"byte_end":932,"line_start":25,"line_end":25,"column_start":1,"column_end":73}},{"value":"/ }","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":933,"byte_end":938,"line_start":26,"line_end":26,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":939,"byte_end":946,"line_start":27,"line_end":27,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":9},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":1477,"byte_end":1482,"line_start":51,"line_end":51,"column_start":11,"column_end":16},"name":"ToHex","qualname":"::ToHex","value":"ToHex","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":12}],"decl_id":null,"docs":" Encoding values as hex string.","sig":null,"attributes":[{"value":"/ Encoding values as hex string.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":1098,"byte_end":1132,"line_start":37,"line_end":37,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":1133,"byte_end":1136,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ This trait is implemented for all `T` which implement `AsRef<[u8]>`. This","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":1137,"byte_end":1214,"line_start":39,"line_end":39,"column_start":1,"column_end":78}},{"value":"/ includes `String`, `str`, `Vec<u8>` and `[u8]`.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":1215,"byte_end":1266,"line_start":40,"line_end":40,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":1267,"byte_end":1270,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":1271,"byte_end":1284,"line_start":42,"line_end":42,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":1285,"byte_end":1288,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":1289,"byte_end":1296,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/ use hex::ToHex;","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":1297,"byte_end":1316,"line_start":45,"line_end":45,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":1317,"byte_end":1320,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ println!(\"{}\", \"Hello world!\".encode_hex::<String>());","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":1321,"byte_end":1379,"line_start":47,"line_end":47,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":1380,"byte_end":1387,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":1388,"byte_end":1391,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ *Note*: instead of using this trait, you might want to use `encode()`.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":1392,"byte_end":1466,"line_start":50,"line_end":50,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":10},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":1612,"byte_end":1622,"line_start":54,"line_end":54,"column_start":8,"column_end":18},"name":"encode_hex","qualname":"::ToHex::encode_hex","value":"fn encode_hex<T>(&Self) -> T where T: iter::FromIterator<char>","parent":{"krate":0,"index":9},"children":[],"decl_id":null,"docs":" Encode the hex strict representing `self` into the result.. Lower case\n letters are used (e.g. `f9b4ca`)\n","sig":null,"attributes":[{"value":"/ Encode the hex strict representing `self` into the result.. Lower case","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":1489,"byte_end":1563,"line_start":52,"line_end":52,"column_start":5,"column_end":79}},{"value":"/ letters are used (e.g. `f9b4ca`)","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":1568,"byte_end":1604,"line_start":53,"line_end":53,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":12},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":1793,"byte_end":1809,"line_start":58,"line_end":58,"column_start":8,"column_end":24},"name":"encode_hex_upper","qualname":"::ToHex::encode_hex_upper","value":"fn encode_hex_upper<T>(&Self) -> T where T: iter::FromIterator<char>","parent":{"krate":0,"index":9},"children":[],"decl_id":null,"docs":" Encode the hex strict representing `self` into the result.. Lower case\n letters are used (e.g. `F9B4CA`)\n","sig":null,"attributes":[{"value":"/ Encode the hex strict representing `self` into the result.. Lower case","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":1670,"byte_end":1744,"line_start":56,"line_end":56,"column_start":5,"column_end":79}},{"value":"/ letters are used (e.g. `F9B4CA`)","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":1749,"byte_end":1785,"line_start":57,"line_end":57,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":3409,"byte_end":3419,"line_start":119,"line_end":119,"column_start":8,"column_end":18},"name":"encode_hex","qualname":"<T as ToHex>::encode_hex","value":"fn encode_hex<U>(&Self) -> U where U: iter::FromIterator<char>","parent":{"krate":0,"index":9},"children":[],"decl_id":{"krate":0,"index":10},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":3532,"byte_end":3548,"line_start":123,"line_end":123,"column_start":8,"column_end":24},"name":"encode_hex_upper","qualname":"<T as ToHex>::encode_hex_upper","value":"fn encode_hex_upper<U>(&Self) -> U where U: iter::FromIterator<char>","parent":{"krate":0,"index":9},"children":[],"decl_id":{"krate":0,"index":12},"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":70},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":3892,"byte_end":3911,"line_start":133,"line_end":133,"column_start":5,"column_end":24},"name":"InvalidHexCharacter","qualname":"::FromHexError::InvalidHexCharacter","value":"FromHexError::InvalidHexCharacter { c, index }","parent":{"krate":0,"index":69},"children":[],"decl_id":null,"docs":" An invalid character was found. Valid ones are: `0...9`, `a...f`\n or `A...F`.\n","sig":null,"attributes":[{"value":"/ An invalid character was found. Valid ones are: `0...9`, `a...f`","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":3799,"byte_end":3867,"line_start":131,"line_end":131,"column_start":5,"column_end":73}},{"value":"/ or `A...F`.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":3872,"byte_end":3887,"line_start":132,"line_end":132,"column_start":5,"column_end":20}}]},{"kind":"Field","id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":3922,"byte_end":3923,"line_start":134,"line_end":134,"column_start":9,"column_end":10},"name":"c","qualname":"::FromHexError::InvalidHexCharacter::c","value":"char","parent":{"krate":0,"index":70},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":72},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":3939,"byte_end":3944,"line_start":135,"line_end":135,"column_start":9,"column_end":14},"name":"index","qualname":"::FromHexError::InvalidHexCharacter::index","value":"usize","parent":{"krate":0,"index":70},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":4059,"byte_end":4068,"line_start":140,"line_end":140,"column_start":5,"column_end":14},"name":"OddLength","qualname":"::FromHexError::OddLength","value":"FromHexError::OddLength","parent":{"krate":0,"index":69},"children":[],"decl_id":null,"docs":" A hex string's length needs to be even, as two digits correspond to\n one byte.\n","sig":null,"attributes":[{"value":"/ A hex string's length needs to be even, as two digits correspond to","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":3965,"byte_end":4036,"line_start":138,"line_end":138,"column_start":5,"column_end":76}},{"value":"/ one byte.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":4041,"byte_end":4054,"line_start":139,"line_end":139,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":75},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":4241,"byte_end":4260,"line_start":145,"line_end":145,"column_start":5,"column_end":24},"name":"InvalidStringLength","qualname":"::FromHexError::InvalidStringLength","value":"FromHexError::InvalidStringLength","parent":{"krate":0,"index":69},"children":[],"decl_id":null,"docs":" If the hex string is decoded into a fixed sized container, such as an\n array, the hex string's length * 2 has to match the container's\n length.\n","sig":null,"attributes":[{"value":"/ If the hex string is decoded into a fixed sized container, such as an","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":4075,"byte_end":4148,"line_start":142,"line_end":142,"column_start":5,"column_end":78}},{"value":"/ array, the hex string's length * 2 has to match the container's","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":4153,"byte_end":4220,"line_start":143,"line_end":143,"column_start":5,"column_end":72}},{"value":"/ length.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":4225,"byte_end":4236,"line_start":144,"line_end":144,"column_start":5,"column_end":16}}]},{"kind":"Enum","id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":3780,"byte_end":3792,"line_start":130,"line_end":130,"column_start":10,"column_end":22},"name":"FromHexError","qualname":"::FromHexError","value":"enum FromHexError {\n    InvalidHexCharacter {\n            c: char,\n            index: usize,\n        },\n    OddLength,\n    InvalidStringLength,\n}","parent":null,"children":[{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":75}],"decl_id":null,"docs":" The error type for decoding a hex string into `Vec<u8>` or `[u8; N]`.\n","sig":null,"attributes":[{"value":"/ The error type for decoding a hex string into `Vec<u8>` or `[u8; N]`.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":3656,"byte_end":3729,"line_start":128,"line_end":128,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":4338,"byte_end":4349,"line_start":150,"line_end":150,"column_start":8,"column_end":19},"name":"description","qualname":"<FromHexError as std::error::Error>::description","value":"fn description(&Self) -> &str","parent":{"krate":1,"index":2569},"children":[],"decl_id":{"krate":1,"index":2573},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":4667,"byte_end":4670,"line_start":161,"line_end":161,"column_start":8,"column_end":11},"name":"fmt","qualname":"<FromHexError as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10122},"children":[],"decl_id":{"krate":2,"index":10123},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":50},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":5529,"byte_end":5536,"line_start":193,"line_end":193,"column_start":11,"column_end":18},"name":"FromHex","qualname":"::FromHex","value":"FromHex: Sized","parent":null,"children":[{"krate":0,"index":51},{"krate":0,"index":52}],"decl_id":null,"docs":" Types that can be decoded from a hex string.","sig":null,"attributes":[{"value":"/ Types that can be decoded from a hex string.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":5091,"byte_end":5139,"line_start":173,"line_end":173,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":5140,"byte_end":5143,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ This trait is implemented for `Vec<u8>` and small `u8`-arrays.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":5144,"byte_end":5210,"line_start":175,"line_end":175,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":5211,"byte_end":5214,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":5215,"byte_end":5228,"line_start":177,"line_end":177,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":5229,"byte_end":5232,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":5233,"byte_end":5240,"line_start":179,"line_end":179,"column_start":1,"column_end":8}},{"value":"/ use hex::FromHex;","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":5241,"byte_end":5262,"line_start":180,"line_end":180,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":5263,"byte_end":5266,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ match Vec::from_hex(\"48656c6c6f20776f726c6421\") {","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":5267,"byte_end":5320,"line_start":182,"line_end":182,"column_start":1,"column_end":54}},{"value":"/     Ok(vec) => {","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":5321,"byte_end":5341,"line_start":183,"line_end":183,"column_start":1,"column_end":21}},{"value":"/         for b in vec {","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":5342,"byte_end":5368,"line_start":184,"line_end":184,"column_start":1,"column_end":27}},{"value":"/             println!(\"{}\", b as char);","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":5369,"byte_end":5411,"line_start":185,"line_end":185,"column_start":1,"column_end":43}},{"value":"/         }","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":5412,"byte_end":5425,"line_start":186,"line_end":186,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":5426,"byte_end":5435,"line_start":187,"line_end":187,"column_start":1,"column_end":10}},{"value":"/     Err(e) => {","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":5436,"byte_end":5455,"line_start":188,"line_end":188,"column_start":1,"column_end":20}},{"value":"/         // Deal with the error ...","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":5456,"byte_end":5494,"line_start":189,"line_end":189,"column_start":1,"column_end":39}},{"value":"/     }","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":5495,"byte_end":5504,"line_start":190,"line_end":190,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":5505,"byte_end":5510,"line_start":191,"line_end":191,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":5511,"byte_end":5518,"line_start":192,"line_end":192,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":51},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":5555,"byte_end":5560,"line_start":194,"line_end":194,"column_start":10,"column_end":15},"name":"Error","qualname":"::FromHex::Error","value":"type Error;","parent":{"krate":0,"index":50},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":5839,"byte_end":5847,"line_start":201,"line_end":201,"column_start":8,"column_end":16},"name":"from_hex","qualname":"::FromHex::from_hex","value":"fn from_hex<T>(T) -> Result<Self, Self::Error> where T: AsRef<[u8]>","parent":{"krate":0,"index":50},"children":[],"decl_id":null,"docs":" Creates an instance of type `Self` from the given hex string, or fails\n with a custom error type.","sig":null,"attributes":[{"value":"/ Creates an instance of type `Self` from the given hex string, or fails","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":5567,"byte_end":5641,"line_start":196,"line_end":196,"column_start":5,"column_end":79}},{"value":"/ with a custom error type.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":5646,"byte_end":5675,"line_start":197,"line_end":197,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":5680,"byte_end":5683,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ Both, upper and lower case characters are valid and can even be","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":5688,"byte_end":5755,"line_start":199,"line_end":199,"column_start":5,"column_end":72}},{"value":"/ mixed (e.g. `f9b4ca`, `F9B4CA` and `f9B4Ca` are all valid strings).","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":5760,"byte_end":5831,"line_start":200,"line_end":200,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":6321,"byte_end":6329,"line_start":221,"line_end":221,"column_start":8,"column_end":16},"name":"from_hex","qualname":"<Vec<u8> as FromHex>::from_hex","value":"fn from_hex<T>(T) -> Result<Self, Self::Error> where T: AsRef<[u8]>","parent":{"krate":0,"index":50},"children":[],"decl_id":{"krate":0,"index":52},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":61},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":8528,"byte_end":8534,"line_start":286,"line_end":286,"column_start":8,"column_end":14},"name":"encode","qualname":"::encode","value":"fn encode<T>(T) -> String where T: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Encodes `data` as hex string using lowercase characters.","sig":null,"attributes":[{"value":"/ Encodes `data` as hex string using lowercase characters.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":8027,"byte_end":8087,"line_start":273,"line_end":273,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":8088,"byte_end":8091,"line_start":274,"line_end":274,"column_start":1,"column_end":4}},{"value":"/ Lowercase characters are used (e.g. `f9b4ca`). The resulting string's","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":8092,"byte_end":8165,"line_start":275,"line_end":275,"column_start":1,"column_end":74}},{"value":"/ length is always even, each byte in `data` is always encoded using two hex","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":8166,"byte_end":8244,"line_start":276,"line_end":276,"column_start":1,"column_end":79}},{"value":"/ digits. Thus, the resulting string contains exactly twice as many bytes as","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":8245,"byte_end":8323,"line_start":277,"line_end":277,"column_start":1,"column_end":79}},{"value":"/ the input data.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":8324,"byte_end":8343,"line_start":278,"line_end":278,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":8344,"byte_end":8347,"line_start":279,"line_end":279,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":8348,"byte_end":8361,"line_start":280,"line_end":280,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":8362,"byte_end":8365,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":8366,"byte_end":8373,"line_start":282,"line_end":282,"column_start":1,"column_end":8}},{"value":"/ assert_eq!(hex::encode(\"Hello world!\"), \"48656c6c6f20776f726c6421\");","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":8374,"byte_end":8446,"line_start":283,"line_end":283,"column_start":1,"column_end":73}},{"value":"/ assert_eq!(hex::encode(vec![1, 2, 3, 15, 16]), \"0102030f10\");","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":8447,"byte_end":8512,"line_start":284,"line_end":284,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":8513,"byte_end":8520,"line_start":285,"line_end":285,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":63},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":8933,"byte_end":8945,"line_start":300,"line_end":300,"column_start":8,"column_end":20},"name":"encode_upper","qualname":"::encode_upper","value":"fn encode_upper<T>(T) -> String where T: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Encodes `data` as hex string using uppercase characters.","sig":null,"attributes":[{"value":"/ Encodes `data` as hex string using uppercase characters.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":8597,"byte_end":8657,"line_start":290,"line_end":290,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":8658,"byte_end":8661,"line_start":291,"line_end":291,"column_start":1,"column_end":4}},{"value":"/ Apart from the characters' casing, this works exactly like `encode()`.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":8662,"byte_end":8736,"line_start":292,"line_end":292,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":8737,"byte_end":8740,"line_start":293,"line_end":293,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":8741,"byte_end":8754,"line_start":294,"line_end":294,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":8755,"byte_end":8758,"line_start":295,"line_end":295,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":8759,"byte_end":8766,"line_start":296,"line_end":296,"column_start":1,"column_end":8}},{"value":"/ assert_eq!(hex::encode_upper(\"Hello world!\"), \"48656C6C6F20776F726C6421\");","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":8767,"byte_end":8845,"line_start":297,"line_end":297,"column_start":1,"column_end":79}},{"value":"/ assert_eq!(hex::encode_upper(vec![1, 2, 3, 15, 16]), \"0102030F10\");","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":8846,"byte_end":8917,"line_start":298,"line_end":298,"column_start":1,"column_end":72}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":8918,"byte_end":8925,"line_start":299,"line_end":299,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":65},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":9500,"byte_end":9506,"line_start":319,"line_end":319,"column_start":8,"column_end":14},"name":"decode","qualname":"::decode","value":"fn decode<T>(T) -> Result<Vec<u8>, FromHexError> where T: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Decodes a hex string into raw bytes.","sig":null,"attributes":[{"value":"/ Decodes a hex string into raw bytes.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":9014,"byte_end":9054,"line_start":304,"line_end":304,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":9055,"byte_end":9058,"line_start":305,"line_end":305,"column_start":1,"column_end":4}},{"value":"/ Both, upper and lower case characters are valid in the input string and can","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":9059,"byte_end":9138,"line_start":306,"line_end":306,"column_start":1,"column_end":80}},{"value":"/ even be mixed (e.g. `f9b4ca`, `F9B4CA` and `f9B4Ca` are all valid strings).","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":9139,"byte_end":9218,"line_start":307,"line_end":307,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":9219,"byte_end":9222,"line_start":308,"line_end":308,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":9223,"byte_end":9236,"line_start":309,"line_end":309,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":9237,"byte_end":9244,"line_start":310,"line_end":310,"column_start":1,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":9245,"byte_end":9260,"line_start":311,"line_end":311,"column_start":1,"column_end":16}},{"value":"/     hex::decode(\"48656c6c6f20776f726c6421\"),","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":9261,"byte_end":9309,"line_start":312,"line_end":312,"column_start":1,"column_end":49}},{"value":"/     Ok(\"Hello world!\".to_owned().into_bytes())","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":9310,"byte_end":9360,"line_start":313,"line_end":313,"column_start":1,"column_end":51}},{"value":"/ );","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":9361,"byte_end":9367,"line_start":314,"line_end":314,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":9368,"byte_end":9371,"line_start":315,"line_end":315,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(hex::decode(\"123\"), Err(hex::FromHexError::OddLength));","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":9372,"byte_end":9442,"line_start":316,"line_end":316,"column_start":1,"column_end":71}},{"value":"/ assert!(hex::decode(\"foo\").is_err());","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":9443,"byte_end":9484,"line_start":317,"line_end":317,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":9485,"byte_end":9492,"line_start":318,"line_end":318,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":67},"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":10001,"byte_end":10016,"line_start":334,"line_end":334,"column_start":8,"column_end":23},"name":"decode_to_slice","qualname":"::decode_to_slice","value":"fn decode_to_slice<T>(T, &mut [u8]) -> Result<(), FromHexError> where\nT: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Decode a hex string into a mutable bytes slice.","sig":null,"attributes":[{"value":"/ Decode a hex string into a mutable bytes slice.","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":9598,"byte_end":9649,"line_start":323,"line_end":323,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":9650,"byte_end":9653,"line_start":324,"line_end":324,"column_start":1,"column_end":4}},{"value":"/ Both, upper and lower case characters are valid in the input string and can","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":9654,"byte_end":9733,"line_start":325,"line_end":325,"column_start":1,"column_end":80}},{"value":"/ even be mixed (e.g. `f9b4ca`, `F9B4CA` and `f9B4Ca` are all valid strings).","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":9734,"byte_end":9813,"line_start":326,"line_end":326,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":9814,"byte_end":9817,"line_start":327,"line_end":327,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":9818,"byte_end":9831,"line_start":328,"line_end":328,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":9832,"byte_end":9839,"line_start":329,"line_end":329,"column_start":1,"column_end":8}},{"value":"/ let mut bytes = [0u8; 4];","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":9840,"byte_end":9869,"line_start":330,"line_end":330,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(hex::decode_to_slice(\"6b697769\", &mut bytes as &mut [u8]), Ok(()));","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":9870,"byte_end":9952,"line_start":331,"line_end":331,"column_start":1,"column_end":83}},{"value":"/ assert_eq!(&bytes, b\"kiwi\");","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":9953,"byte_end":9985,"line_start":332,"line_end":332,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":9986,"byte_end":9993,"line_start":333,"line_end":333,"column_start":1,"column_end":8}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":2103,"byte_end":2118,"line_start":70,"line_end":70,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":26}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":2347,"byte_end":2362,"line_start":80,"line_end":80,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":33}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":2982,"byte_end":2997,"line_start":102,"line_end":102,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":3398,"byte_end":3399,"line_start":118,"line_end":118,"column_start":32,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":42},{"krate":0,"index":44}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":4316,"byte_end":4328,"line_start":149,"line_end":149,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":47}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":4645,"byte_end":4657,"line_start":160,"line_end":160,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":49}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":6272,"byte_end":6275,"line_start":218,"line_end":218,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":2103,"byte_end":2118,"line_start":70,"line_end":70,"column_start":10,"column_end":25},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":18},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":2347,"byte_end":2362,"line_start":80,"line_end":80,"column_start":23,"column_end":38},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":18},"to":{"krate":2,"index":8481}},{"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":2982,"byte_end":2997,"line_start":102,"line_end":102,"column_start":38,"column_end":53},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":18},"to":{"krate":2,"index":8355}},{"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":3398,"byte_end":3399,"line_start":118,"line_end":118,"column_start":32,"column_end":33},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":41},"to":{"krate":0,"index":9}},{"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":4316,"byte_end":4328,"line_start":149,"line_end":149,"column_start":28,"column_end":40},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":69},"to":{"krate":1,"index":2569}},{"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":4645,"byte_end":4657,"line_start":160,"line_end":160,"column_start":23,"column_end":35},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":69},"to":{"krate":2,"index":10122}},{"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":5538,"byte_end":5543,"line_start":193,"line_end":193,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":3184},"to":{"krate":0,"index":50}},{"span":{"file_name":"C:\\Users\\Vinay Konuru\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.4.0\\src\\lib.rs","byte_start":6272,"byte_end":6275,"line_start":218,"line_end":218,"column_start":18,"column_end":21},"kind":{"Impl":{"id":6}},"from":{"krate":5,"index":7753},"to":{"krate":0,"index":50}}]}